/* eslint-disable @typescript-eslint/no-require-imports */
const fs = require('fs')
const path = require('path')

const postsDir = path.resolve(__dirname, '../app/posts')
const outputFile = path.resolve(__dirname, '../app/data/allPosts.ts')

/**
 * Recursively walk through a directory and collect all .mdx file paths
 * @param {string} dir - Directory to search
 * @returns {string[]} - Array of .mdx file paths
 */
function walk(dir) {
  let results = []
  const list = fs.readdirSync(dir)
  list.forEach(file => {
    const filePath = path.join(dir, file)
    const stat = fs.statSync(filePath)
    if (stat && stat.isDirectory()) {
      results = results.concat(walk(filePath))
    } else if (
      file.endsWith('page.mdx') &&
      file !== 'page.tsx'
    ) {
      results.push(filePath)
    }
  })
  return results
}

const mdxFiles = walk(postsDir)
/**
 * Generate import statements for each MDX file's metadata
 */
const imports = mdxFiles.map((file) => {
  const relPath = path.relative(path.join(postsDir, '..'), file).replace(/\\/g, '/')
  const dirName = path.basename(path.dirname(file))
  const varName = dirName
    .replace(/-(\w)/g, (_, c) => c.toUpperCase())
    .replace(/[^a-zA-Z0-9]/g, '') + 'MetaData'
  return `import { metadata as ${varName} } from "../${relPath}";`
})
/**
 * Generate post objects for the allPosts array
 */
const posts = mdxFiles.map((file) => {
  const relPath = path.relative(postsDir, file).replace(/\\/g, '/')
  const url = '/posts/' + relPath.replace(/\/page\.mdx$/, '').replace(/\.mdx$/, '').replace(/\/index$/, '')
  const dirName = path.basename(path.dirname(file))
  const varName = dirName
    .replace(/-(\w)/g, (_, c) => c.toUpperCase())
    .replace(/[^a-zA-Z0-9]/g, '') + 'MetaData'
  return `  {\n    url: '${url}',\n    metadata: ${varName}\n  }`
})

// Combine imports and posts into the final output content
const content = `
/* Note: auto generated by scripts. You should not edit this file. */
${imports.join('\n')}

export const allPosts = [
${posts.join(',\n')}
]
`

fs.writeFileSync(outputFile, content)
console.log('allPost.ts generated!')